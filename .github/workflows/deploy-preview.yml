name: Deploy Preview to Staging
on: workflow_dispatch
jobs:
  build-image:
    name: "Build Staging Image"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag and push image to Amazon ECR
        env:
          RAILS_ENV: staging
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lago-api-staging
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  porter-deploy:
    runs-on: ubuntu-latest
    env:
      PORTER_HOST: https://dashboard.getporter.dev
      PORTER_CLUSTER: ${{ secrets.PORTER_CLUSTER }}
      PORTER_PROJECT: ${{ secrets.PORTER_PROJECT }}
      PORTER_TOKEN: ${{ secrets.PORTER_TOKEN_2643 }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4
    - name: Set current folder
      id: current_folder
      run: echo "::set-output name=folder::$(pwd)"
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag and push image to Amazon ECR
      env:
        RAILS_ENV: staging
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lago-api-staging
        IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Replace Variables in values.yaml
      env:
        ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/lago-api-staging
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
        DATABASE_URL: postgres://lago:${{ secrets.DB_STAGING_PASSWORD }}@${{ secrets.DB_STAGING_HOST}}:5432/${{ steps.extract_branch.outputs.branch }}
      run: |
        sudo apt update && sudo apt install -y gettext
        envsubst < ./porter/values.yaml > ./porter/env_values.yaml
    - name: Install and Configure kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
            --progress-bar \
            --location \
            --remote-name
        chmod +x kubectl
        mv kubectl /usr/local/bin/
        echo "${{ secrets.KUBE_STAGING_CONFIG }}" | base64 -d > kubeconfig.yaml
    - name: Install and Configure Helm
      run: |
        curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
        sudo apt-get install apt-transport-https --yes
        echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update
        sudo apt-get install helm
    - name: Get Helm deployment
      id: helm_deployment
      run: echo "::set-output name=deployment::$(helm --kubeconfig ./kubeconfig.yaml list -f ${{ steps.extract_branch.outputs.branch }}-api -o=json | jq '.[0].name')"
    - name: Delete Porter app
      if: ${{ steps.helm_deployment.outputs.deployment != 'null' }}
      run: |
        helm --kubeconfig ./kubeconfig.yaml uninstall ${{ steps.extract_branch.outputs.branch }}-api
    - name: Create Porter app
      uses: porter-dev/porter-cli-action@v0.1.0
      with:
        command: create web --app ${{ steps.extract_branch.outputs.branch}}-api --source registry --values ./porter/env_values.yaml --image ${{ steps.login-ecr.outputs.registry }}/lago-api-staging:${{ steps.extract_branch.outputs.branch }}
